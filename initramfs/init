#!/bin/sh


#Create all the symlinks to /bin/busybox
/bin/busybox --install -s
clear

mount -t proc proc /proc
mount -t sysfs sysfs /sys

#Disable kernel messages from popping onto the screen
echo 0 > /proc/sys/kernel/printk

#Clear the screen

modprobe xfs
modprobe e1000

#Create device nodes
mknod /dev/null c 1 3
mknod /dev/tty c 5 0
mdev -s


#Function for parsing command line options with "=" in them
# get_opt("init=/sbin/init") will return "/sbin/init"
get_opt() {
    echo "$@" | cut -d "=" -f 2
}

#Defaults
init="/sbin/init"
root="/dev/hda1"

#Process command line options
for i in $(cat /proc/cmdline); do
    case $i in
        root\=*)
            root=$(get_opt $i)
            ;;
        init\=*)
            init=$(get_opt $i)
            ;;
    esac
done

if [ -e "${root}" ]; then
    echo 'Rootfs exists! not rewriting disk'
else
    echo 'Rootfs does not exist! Downloading and flashing partition'
    echo ''
    echo 'Setting network up'
    ifconfig eth0 192.168.2.33 netmask 255.255.255.0 up
    route add default gw 192.168.2.1
    echo "nameserver 192.168.2.1" > /etc/resolv.conf
    echo 'Network set up'
    curl http://david-dotopc.labs:8000/newfs.img --output newfs.img
    echo 'Downloaded, flashing'
    dd if=newfs.img of=/dev/sda bs=1M conv=notrunc
    echo 'Flashed, syncing'
    sync
    echo 'Done flashing disk..'
    partprobe /dev/sda # kernel is informed of new partition existing
    umount /sys /proc          # upon remounting sys and proc
    mount -t sysfs sysfs /sys  # /proc gets rescanned
    mount -t proc proc /proc   # and 
    mdev -s                    # and mdev will populate all 'new' block devices in /dev
fi

#Mount the root device
mkdir -p /newroot
mount "${root}" /newroot

#Check if $init exists and is executable
if [[ -x "/newroot/${init}" ]] ; then
    #Unmount all other mounts so that the ram used by
    #the initramfs can be cleared after switch_root
    umount /sys /proc
    
    #Switch to the new root and execute init
    echo 'switching rootfs...'
    exec switch_root /newroot "${init}"
else
    echo 'new init not executable'
fi

#This will only be run if the exec above failed
echo "Failed to switch_root, dropping to a shell"
exec sh
